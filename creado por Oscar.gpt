<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Página definitiva</title>
    <link rel="stylesheet" href="styles2.css">

    <!-- Leaflet CSS y JavaScript -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css"/>
    <script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"></script>
    <!-- Leaflet Routing Machine -->
    <script src="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js"></script>
    <!-- Leaflet Control Geocoder -->
    <script src="https://unpkg.com/leaflet-control-geocoder@1.13.0/dist/Control.Geocoder.js"></script>
    <!-- Leaflet Marker Cluster -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css"/>
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css"/>
    <script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>
</head>
<body>
    <div class="container">
        <div class="wrapper">
            <div class="card-switch">
                <label class="switch">
                   <input type="checkbox" class="toggle" id="routeToggle" onchange="resetFilters()">
                   <span class="slider"></span>
                   <span class="card-side"></span>
                   <div class="flip-card__inner">
                      <div class="flip-card__front">
                         <div class="title">Búsqueda</div>
                         <form class="flip-card__form" action="">
                            <label for="search-charger-filter">Tipo de Cargador:</label>
                            <select id="search-charger-filter" class="flip-card__input">
                                <option value="all">Todos</option>
                                <option value="Level 1">Tipo 1</option>
                                <option value="Level 2">Tipo 2</option>
                                <option value="DC Fast">Tipo Fast</option>
                            </select>
                            <label for="search-power-filter">Acceso:</label>
                            <select id="search-power-filter" class="flip-card__input">
                              <option value="all">Todos</option>
                              <option value="Public">Público</option>
                              <option value="Private">Privado</option>
                            </select>
                            <label for="search-state-filter">Estado:</label>
                            <select id="search-state-filter" class="flip-card__input">
                                <option value="all">Todos</option>
                                <option value="AB">Alberta</option>
                                <option value="AK">Alaska</option>
                                <option value="AL">Alabama</option>
                                <!-- Agregar más opciones de estado si es necesario -->
                            </select>
                         </form>
                      </div>
                      <div class="flip-card__back">
                         <div class="title">Ruta</div>
                         <form class="flip-card__form" action="">
                            <label for="route-charger-filter">Tipo de Cargador:</label>
                            <select id="route-charger-filter" class="flip-card__input">
                                <option value="all">Todos</option>
                                <option value="Level 1">Tipo 1</option>
                                <option value="Level 2">Tipo 2</option>
                                <option value="DC Fast">Tipo Fast</option>
                            </select>
                            <button type="button" id="clearMarkersButton" class="flip-card__btn">Eliminar ruta</button>
                            <button type="button" id="removeStopsButton" class="flip-card__btn">Eliminar paradas</button>
                            <button type="button" id="changeAutonomyButton" class="flip-card__btn">Cambiar autonomía</button>
                            <div id="reloadRouteContainer" class="control-button">
                                <button type="button" id="reloadRouteButton" style="background-color: white; border: none;">
                                    <img src="C:\Users\Nacho\OneDrive\Desktop\159657.png" alt="Recargar Ruta">
                                </button>
                            </div>
                         </form>
                      </div>
                   </div>
                </label>
            </div>   
        </div>
    </div>
    

    <div id="map" style="position: absolute; top: 10px; right: 10px; height: calc(100vh - 20px); width: calc(100vw - 510px);"></div>

    <script>
        var map = L.map('map').setView([37.0902, -95.7129], 4);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        var markerCluster = L.markerClusterGroup();

        var originalData = [
            {
                "Fuel Type Code": "ELEC",
                "Station Name": "LADWP - Truesdale Center",
                "Street Address": "11797 Truesdale St",
                "City": "Sun Valley",
                "State": "CA",
                "Country": "US",
                "Groups With Access Code": "Private",
                "EV Level1 EVSE Num": "null",
                "EV Level2 EVSE Num": 57.0,
                "EV DC Fast Count": 2.0,
                "Latitude": 34.2483191527193,
                "Longitude": -118.3879713743439
            },
            {
                "Fuel Type Code": "ELEC",
                "Station Name": "Los Angeles Convention Center",
                "Street Address": "1201 S Figueroa St",
                "City": "Los Angeles",
                "State": "CA",
                "Country": "US",
                "Groups With Access Code": "Public",
                "EV Level1 EVSE Num": "null",
                "EV Level2 EVSE Num": 7.0,
                "EV DC Fast Count": "null",
                "Latitude": 34.040539,
                "Longitude": -118.271387
            }
        ];

        var data = originalData.slice(); // Hacer una copia de los datos originales
        var customIcon = L.icon({
            iconUrl: 'file:///C:/Users/Nacho/Downloads/electric-station-fuel-svgrepo-com.svg',
            iconSize: [32, 32],
            iconAnchor: [16, 32] // Punto de anclaje
        });
        
        // Función para agregar marcadores al mapa
        function addMarkers() {
            markerCluster.clearLayers(); // Limpiar marcadores anteriores
            data.forEach(function (station) {
                var marker = L.marker([station.Latitude, station.Longitude], { icon: customIcon });
                marker.bindPopup(station['Station Name']);
                markerCluster.addLayer
                (marker);
            });
            map.addLayer(markerCluster);
        }

        // Función para aplicar filtros en la opción de búsqueda
        function applySearchFilters() {
            var powerFilter = document.getElementById('search-power-filter').value;
            var stateFilter = document.getElementById('search-state-filter').value;
            var chargerFilter = document.getElementById('search-charger-filter').value;
            data = originalData.filter(function (station) {
                var passPowerFilter = (powerFilter === 'all') || (station['Groups With Access Code'] === powerFilter);
                var passStateFilter = (stateFilter === 'all') || (station['State'] === stateFilter);
                var passChargerFilter = (chargerFilter === 'all') || 
                    (chargerFilter === 'Level 1' && station['EV Level1 EVSE Num'] !== 'null') || 
                    (chargerFilter === 'Level 2' && station['EV Level2 EVSE Num'] !== 'null') || 
                    (chargerFilter === 'DC Fast' && station['EV DC Fast Count'] !== 'null');
                return passPowerFilter && passStateFilter && passChargerFilter;
            });
            addMarkers();
        }

        // Función para aplicar filtros en la opción de ruta
        function applyRouteFilters() {
            var chargerFilter = document.getElementById('route-charger-filter').value;
            data = originalData.filter(function (station) {
                var passChargerFilter = (chargerFilter === 'all') || 
                    (chargerFilter === 'Level 1' && station['EV Level1 EVSE Num'] !== 'null') || 
                    (chargerFilter === 'Level 2' && station['EV Level2 EVSE Num'] !== 'null') || 
                    (chargerFilter === 'DC Fast' && station['EV DC Fast Count'] !== 'null');
                return passChargerFilter;
            });
            addMarkers();
        }

        // Event listeners para aplicar los filtros al cambiar las selecciones
        document.getElementById('search-power-filter').addEventListener('change', applySearchFilters);
        document.getElementById('search-state-filter').addEventListener('change', applySearchFilters);
        document.getElementById('search-charger-filter').addEventListener('change', applySearchFilters);
        document.getElementById('route-charger-filter').addEventListener('change', applyRouteFilters);

        // Inicializar los marcadores en el mapa
        addMarkers();

        // Inicializar el control de ruta, inicialmente oculto
        var routingControl = L.Routing.control({
            waypoints: [],
            routeWhileDragging: true,
            geocoder: L.Control.Geocoder.nominatim(),
            showAlternatives: true,
            altLineOptions: {
                styles: [
                    { color: 'black', opacity: 0.15, weight: 9 },
                    { color: 'blue', opacity: 0.15, weight: 6 },
                    { color: 'blue', opacity: 0.5, weight: 2 }
                ]
            }
        });

        // Función para limpiar los marcadores de la ruta
        function clearRouteMarkers() {
            routingControl.setWaypoints([]); // Limpiar los puntos de la ruta
            map.eachLayer(function (layer) {
                if (layer.options && layer.options.icon && layer.options.icon.options && layer.options.icon.options.className === 'x-marker') {
                    map.removeLayer(layer);
                }
            });
        }

        // Función para reiniciar los filtros cuando cambia el interruptor
        // Función para reiniciar los filtros cuando cambia el interruptor
        function resetFilters() {
            var isRoute = document.getElementById('routeToggle').checked;
            if (!isRoute) {
                document.getElementById('search-power-filter').value = 'all';
                document.getElementById('search-state-filter').value = 'all';
                document.getElementById('search-charger-filter').value = 'all';
                applySearchFilters();
                
                // Ocultar y remover el control de ruta
                if (map.hasLayer(routingControl)) {
                    map.removeControl(routingControl);
                }

                // Eliminar el geocoder de inicio y fin
                var geocoderContainer = document.querySelector('.leaflet-routing-geocoders');
                if (geocoderContainer) {
                    geocoderContainer.remove();
                }

                // Ejecutar la misma lógica que el botón "Eliminar ruta"
                clearRouteMarkers();
                // Remover las marcas "X"
                map.eachLayer(function (layer) {
                    if (layer.options && layer.options.icon && layer.options.icon.options && layer.options.icon.options.className === 'x-marker') {
                        map.removeLayer(layer);
                    }
                });
                // Restablecer la vista del mapa
                map.setView([37.0902, -95.7129], 4);
            } else {
                document.getElementById('route-charger-filter').value = 'all';
                applyRouteFilters();
                // Agregar control de ruta
                if (!map.hasLayer(routingControl)) {
                    routingControl.addTo(map);
                }
            }
        }


        // Botón para limpiar los marcadores de la ruta
        document.getElementById('clearMarkersButton').addEventListener('click', clearRouteMarkers);
            

        // Botón para eliminar las paradas de la ruta
        document.getElementById('removeStopsButton').addEventListener('click', function () {
            var waypoints = routingControl.getWaypoints();
            if (waypoints.length > 2) {
                routingControl.getPlan().setWaypoints([waypoints[0], waypoints[waypoints.length - 1]]);
            }
        });

        // Botón para cambiar la autonomía del vehículo eléctrico
        document.getElementById('changeAutonomyButton').addEventListener('click', function () {
            var newAutonomy = prompt("Ingrese la nueva autonomía en km:");
            if (newAutonomy) {
                // Actualizar la autonomía del vehículo y recalcular la ruta
                autonomyKm = parseFloat(newAutonomy);
                var waypoints = routingControl.getWaypoints();
                routingControl.setWaypoints([]);
                routingControl.setWaypoints(waypoints);
            }
        });

        // Botón para recargar la ruta
        document.getElementById('reloadRouteButton').addEventListener('click', function () {
            var waypoints = routingControl.getWaypoints();
            routingControl.setWaypoints([]); // Limpiar los puntos de la ruta
            routingControl.setWaypoints(waypoints); // Volver a establecer los puntos de la ruta
        });

        // Inicialmente ocultar el control de ruta
        if (document.getElementById('routeToggle').checked) {
            routingControl.addTo(map);
        }

        var autonomyKm = 200; // Valor inicial de la autonomía del coche en kilómetros

        routingControl.on('routesfound', function (e) {
            var route = e.routes[0].coordinates;
            var autonomyLeft = autonomyKm; // Inicializar la autonomía restante

            // Limpiar las marcas existentes
            map.eachLayer(function (layer) {
                if (layer.options && layer.options.icon && layer.options.icon.options && layer.options.icon.options.className === 'x-marker') {
                    map.removeLayer(layer);
                }
            });

            // Iterar sobre los puntos de la ruta para mostrar las marcas "X" cada 180 km
            for (var i = 0; i < route.length - 1; i++) {
                var distance = route[i].distanceTo(route[i + 1]);
                autonomyLeft -= distance / 1000;
                if (autonomyLeft <= 20) {
                    var distanceFromStart = 0;
                    while (distanceFromStart < autonomyKm * 1000) {
                        var ratio = distanceFromStart / (autonomyKm * 1000);
                        var xLat = route[i].lat + ratio * (route[i + 1].lat - route[i].lat);
                        var xLng = route[i].lng + ratio * (route[i + 1].lng - route[i].lng);
                        L.marker([xLat, xLng], { icon: L.divIcon({ className: 'x-marker', html: 'X' }) }).addTo(map);
                        distanceFromStart += autonomyKm * 1000;
                    }
                    autonomyLeft += autonomyKm; // Incrementar autonomyLeft por autonomyKm
                }
            }
        });
    </script>
</body>
</html>
