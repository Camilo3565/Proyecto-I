<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mapa para coches eléctricos</title>
    <link rel="stylesheet" href="styles2.css">

    <!-- Leaflet CSS y JavaScript -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css"/>
    <script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"></script>
    <!-- Leaflet Routing Machine -->
    <script src="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js"></script>
    <!-- Leaflet Control Geocoder -->
    <script src="https://unpkg.com/leaflet-control-geocoder@1.13.0/dist/Control.Geocoder.js"></script>
    <!-- Leaflet Marker Cluster -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css"/>
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css"/>
    <script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>
    <style>
        body, html {
            height: 100%;
            margin: 0;
            display: flex;
        }

        #sidebar {
            width: 300px;
            background: #333;
            color: white;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
        }

        #map {
            flex-grow: 1;
        }

        .sidebar-button, #filterSelect, #chargingTime, #timeCounter, #chargingInterval, #reloadRouteContainer {
            width: 100%;
            margin-bottom: 10px;
            padding: 10px;
            font-size: 16px;
            background-color: #00b318;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-align: center;
        }

        .sidebar-button:hover, #filterSelect:hover, #chargingTime:hover, #timeCounter:hover, #chargingInterval:hover, #reloadRouteContainer:hover {
            background-color: #008f14;
        }

        #reloadRouteButton img {
            width: 20px;
            height: 20px;
        }

        #chargingTime, #timeCounter, #chargingInterval {
            display: none; /* Ocultos por defecto */
        }
    </style>
</head>
<body>
    <div id="sidebar">
        <button id="clearMarkersButton" class="sidebar-button">Eliminar Ruta</button>
        <button id="removeStopsButton" class="sidebar-button">Eliminar Paradas</button>
        <button id="changeAutonomyButton" class="sidebar-button">Cambiar Autonomía</button>
        <select id="filterSelect" class="sidebar-button">
            <option value="all">Todos los cargadores</option>
            <option value="level1">EV Level 1</option>
            <option value="level2">EV Level 2</option>
            <option value="dc">EV DC Fast</option>
        </select>
        <div id="chargingTime" class="sidebar-button">Tiempo de carga: 0h</div>
        <div id="timeCounter" class="sidebar-button">Tiempo acumulado: 0h</div>
        <div id="chargingInterval" class="sidebar-button">Intervalo de tiempo de carga</div>
        <div id="reloadRouteContainer" class="sidebar-button">
            <button id="reloadRouteButton">
                <img src="C:\Users\Nacho\OneDrive\Desktop\159657.png" alt="Recargar Ruta">
            </button>
        </div>
    </div>
    <div id="map"></div>

    <script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder@1.13.0/dist/Control.Geocoder.js"></script>
    <script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>
    <script>
        var map = L.map('map').setView([37.0902, -95.7129], 4); // Establecemos la vista del mapa centrada en Estados Unidos

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(map); // Añadimos la capa de teselas de OpenStreetMap al mapa

        var markerCluster = L.markerClusterGroup(); // Crear grupo de marcadores

        // Datos de ejemplo (reemplaza con tus datos reales)
        var data = [
            {
                "Fuel Type Code": "ELEC",
                "Station Name": "LADWP - Truesdale Center",
                "Street Address": "11797 Truesdale St",
                "City": "Sun Valley",
                "State": "CA",
                "Country": "US",
                "Groups With Access Code": "Private",
                "EV Level1 EVSE Num": "null",
                "EV Level2 EVSE Num": 57.0,
                "EV DC Fast Count": 2.0,
                "Latitude": 34.2483191527193,
                "Longitude": -118.3879713743439
            },
            {
                "Fuel Type Code": "ELEC",
                "Station Name": "Los Angeles Convention Center",
                "Street Address": "1201 S Figueroa St",
                "City": "Los Angeles",
                "State": "CA",
                "Country": "US",
                "Groups With Access Code": "Public",
                "EV Level1 EVSE Num": "null",
                "EV Level2 EVSE Num": 7.0,
                "EV DC Fast Count": "null",
                "Latitude": 34.040539,
                "Longitude": -118.271387
            }
        ];

        var autonomyKm = 200; // Valor inicial de la autonomía del coche en kilómetros
        var accumulatedTime = 0; // Variable para almacenar el tiempo acumulado
        var fastChargingTime = 0; // Tiempo acumulado para cargadores rápidos
        var level1ChargingTime = 0; // Tiempo acumulado para cargadores de nivel 1

        // Preguntar al usuario por la autonomía al cargar la página
        window.onload = function() {
            filterMarkersByChargerType('all'); // Mostrar todos los cargadores al cargar la página
            askAutonomy();
        };

        function askAutonomy() {
            var autonomy = prompt("Por favor, ingrese la autonomía del coche en kilómetros:");
            if (autonomy !== null) {
                autonomyKm = parseFloat(autonomy);
                alert("Has ingresado una autonomía de " + autonomyKm + " kilómetros.");
                // Avisar al usuario si el filtro está en "default"
                var selectedChargerType = document.getElementById('filterSelect').value;
                if (selectedChargerType === 'all') {
                    alert('El filtro de cargadores está en "Todos los cargadores". Por favor, revíselo y seleccione un tipo para obtener una estimación precisa del tiempo de carga.');
                }
            }
        }

        function createButton(label, container) {
            var btn = L.DomUtil.create('button', '', container);
            btn.setAttribute('type', 'button');
            btn.innerHTML = label;
            return btn;
        }

        var ReversablePlan = L.Routing.Plan.extend({
            createGeocoders: function() {
                var container = L.Routing.Plan.prototype.createGeocoders.call(this),
                    reverseButton = createButton('↑↓', container);

                L.DomEvent.on(reverseButton, 'click', function() {
                    var waypoints = this.getWaypoints();
                    this.setWaypoints(waypoints.reverse());
                }, this);

                return container;
            }
        });

        var plan = new ReversablePlan([], {
            geocoder: L.Control.Geocoder.nominatim(),
            routeWhileDragging: true
        });

        var routingControl = L.Routing.control({
            routeWhileDragging: true,
            plan: plan
        });

        function clearMarkersAndRoute() {
            map.eachLayer(function (layer) {
                if (layer instanceof L.Marker && !layer.__parent) {
                    map.removeLayer(layer);
                }
            });
            routingControl.setWaypoints([]);
            document.getElementById('chargingTime').style.display = 'none'; // Ocultar el tiempo de carga cuando se borran las rutas
            accumulatedTime = 0; // Reiniciar el tiempo acumulado
            document.getElementById('timeCounter').innerText = 'Tiempo acumulado: 0h'; // Actualizar el contador de tiempo acumulado
            fastChargingTime = 0; // Reiniciar el tiempo de carga para cargadores rápidos
            level1ChargingTime = 0; // Reiniciar el tiempo de carga para cargadores de nivel 1
            document.getElementById('chargingInterval').innerText = 'Intervalo de tiempo de carga'; // Restablecer el texto del intervalo de tiempo de carga
        }

        function removeStops() {
            routingControl.getPlan().setWaypoints([routingControl.getWaypoints()[0], routingControl.getWaypoints().pop()]);
        }

        function filterMarkersByChargerType(chargerType) {
            markerCluster.clearLayers();
            data.forEach(station => {
                var iconUrl = 'https://upload.wikimedia.org/wikipedia/commons/5/5d/Electric_station_fuel_svgrepo_com.svg';
                var iconSize = [38, 95];
                var popupContent = station['Station Name'];
                
                if (chargerType === 'all' || (station['EV Level1 EVSE Num'] !== 'null' && chargerType === 'level1') || (station['EV Level2 EVSE Num'] !== 'null' && chargerType === 'level2') || (station['EV DC Fast Count'] !== 'null' && chargerType === 'dc')) {
                    var greenIcon = L.icon({
                        iconUrl: iconUrl,
                        iconSize: iconSize,
                        popupAnchor: [0, -15]
                    });

                    var marker = L.marker([station.Latitude, station.Longitude], { icon: greenIcon }).bindPopup(popupContent);
                    markerCluster.addLayer(marker);
                }
            });
            map.addLayer(markerCluster); // Añadir el grupo de clúster al mapa
        }

        document.getElementById('clearMarkersButton').addEventListener('click', clearMarkersAndRoute);
        document.getElementById('removeStopsButton').addEventListener('click', removeStops);
        document.getElementById('changeAutonomyButton').addEventListener('click', askAutonomy);
        document.getElementById('filterSelect').addEventListener('change', function() {
            var selectedChargerType = this.value;
            filterMarkersByChargerType(selectedChargerType);
        });

        routingControl.on('routesfound', function(e) {
            accumulatedTime = 0; // Reiniciar el tiempo acumulado cada vez que se establece una nueva ruta

            // Remover las marcas existentes antes de agregar las nuevas
            map.eachLayer(function(layer) {
                if (layer instanceof L.Marker && layer.options.icon && layer.options.icon.options.className === 'x-marker') {
                    map.removeLayer(layer);
                }
            });

            var route = e.routes[0].coordinates;
            var autonomyLeft = autonomyKm;

            // Verificar si el filtro está en "default" (todos los tipos de cargadores)
            var selectedChargerType = document.getElementById('filterSelect').value;
            var filterDefault = selectedChargerType === 'all';

            for (var i = 0; i < route.length - 1; i++) {
                var distance = route[i].distanceTo(route[i + 1]);
                autonomyLeft -= distance / 1000;
                if (!filterDefault && autonomyLeft <= 20) {
                    var distanceFromStart = 0;
                    while (distanceFromStart < autonomyKm * 1000) {
                        var ratio = distanceFromStart / (autonomyKm * 1000);
                        var xLat = route[i].lat + ratio * (route[i + 1].lat - route[i].lat);
                        var xLng = route[i].lng + ratio * (route[i + 1].lng - route[i].lng);
                        L.marker([xLat, xLng], { icon: L.divIcon({ className: 'x-marker', html: 'X' }) }).addTo(map);
                        distanceFromStart += autonomyKm * 1000;
                    }
                    autonomyLeft += autonomyKm; // Incrementar autonomyLeft por autonomyKm
                    
                    // Ajustar el tiempo acumulado según el tipo de cargador seleccionado
                    switch(selectedChargerType) {
                        case 'level1':
                            accumulatedTime += 8; // Aumentar el tiempo acumulado por 8 horas
                            level1ChargingTime = accumulatedTime; // Guardar tiempo acumulado para cargadores de nivel 1
                            break;
                        case 'level2':
                            accumulatedTime += 4; // Aumentar el tiempo acumulado por 4 horas
                            break;
                        case 'dc':
                            accumulatedTime += 0.5; // Aumentar el tiempo acumulado por 0.5 horas
                            fastChargingTime = accumulatedTime; // Guardar tiempo acumulado para cargadores rápidos
                            break;
                        default:
                            // Si no se selecciona ningún tipo de cargador, mostrar un mensaje
                            alert('Seleccione un tipo de cargador para poder calcular el tiempo de carga');
                            return 'X';
                    }
                    document.getElementById('timeCounter').innerText = 'Tiempo acumulado: ' + accumulatedTime + 'h'; // Actualizar el contador de tiempo acumulado
                }
            }

            // Calcular el tiempo de carga solo si no estamos en el modo "default"
            if (!filterDefault) {
                var totalDistance = 0;
                for (var j = 0; j < route.length - 1; j++) {
                    totalDistance += route[j].distanceTo(route[j + 1]);
                }
                var chargingTime = Math.floor(totalDistance / autonomyKm) * 0.5; // 30 minutos por 100 km (0.5h)

                // Mostrar el tiempo de carga en el elemento de HTML
                document.getElementById('chargingTime').innerText = 'Tiempo de carga: ' + chargingTime + 'h';
                document.getElementById('chargingTime').style.visibility = 'visible'; // Mostrar el tiempo de carga

                // Mostrar el intervalo de tiempo de carga
                document.getElementById('chargingInterval').innerText = 'Intervalo de carga: ' + fastChargingTime + 'h - ' + level1ChargingTime + 'h';
            }
        });

        routingControl.addTo(map); // Agregar control de enrutamiento al mapa

        function reloadRoute() {
            routingControl.route(); // Recargar la ruta
        }

        // Asociar la función al botón de recargar ruta
        document.getElementById('reloadRouteButton').addEventListener('click', reloadRoute);
    </script>
</body>
</html>
