<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Página definitiva</title>
    <link rel="stylesheet" href="styles2.css">

    <!-- Leaflet CSS y JavaScript -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css"/>
    <script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"></script>
    <!-- Leaflet Routing Machine -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.css"/>
    <script src="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js"></script>
    <!-- Leaflet Control Geocoder -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder@1.13.0/dist/Control.Geocoder.css"/>
    <script src="https://unpkg.com/leaflet-control-geocoder@1.13.0/dist/Control.Geocoder.js"></script>
    <!-- Leaflet Marker Cluster -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css"/>
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css"/>
    <script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>

    <style>
        .x-marker {
            background-color: transparent;
            color: rgb(0, 0, 0);
            font-size: 16px;
            text-align: center;
            width: 10px;
            height: 10px;
            line-height: 20px;
            border-radius: 50%;
            display: inline-block;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="wrapper">
            <div class="card-switch">
                <label class="switch">
                   <input type="checkbox" class="toggle" id="routeToggle" onchange="resetFilters()">
                   <span class="slider"></span>
                   <span class="card-side"></span>
                   <div class="flip-card__inner">
                      <div class="flip-card__front">
                         <div class="title">Búsqueda</div>
                         <form class="flip-card__form" action="">
                            <label for="search-charger-filter">Tipo de Cargador:</label>
                            <select id="search-charger-filter" class="flip-card__input">
                                <option value="all">Todos</option>
                                <option value="Level 1">Tipo 1</option>
                                <option value="Level 2">Tipo 2</option>
                                <option value="DC Fast">Tipo Fast</option>
                            </select>
                            <label for="search-power-filter">Acceso:</label>
                            <select id="search-power-filter" class="flip-card__input">
                              <option value="all">Todos</option>
                              <option value="Public">Público</option>
                              <option value="Private">Privado</option>
                            </select>
                            <label for="search-state-filter">Estado:</label>
                            <select id="search-state-filter" class="flip-card__input">
                              <option value="all">Todos</option>
                              <option value="CDMX">CDMX</option>
                              <option value="Morelos">Morelos</option>
                            </select>
                            <button type="button" class="flip-card__btn" id="search-button">Buscar</button>
                         </form>
                      </div>
                      <div class="flip-card__back">
                         <div class="title">Ruta</div>
                         <form class="flip-card__form" action="">
                            <button type="button" class="flip-card__btn" id="removeStopsButton">Eliminar Paradas</button>
                            <button type="button" class="flip-card__btn" id="clearMarkersButton">Eliminar Ruta</button>
                            <button type="button" class="flip-card__btn" id="changeAutonomyButton">Cambiar autonomía</button>
                            <div id="timeCounter" class="control-button">Tiempo acumulado: 0h</div>
                            <div id="chargingInterval" class="control-button">Intervalo de tiempo de carga</div>
                         </form>
                      </div>
                   </div>
                </label>
             </div>
        </div>
    </div>
    <div id="map"></div>

    <script>
        // Initialize the map
        const map = L.map('map').setView([37.0902, -95.7129], 4);
    
        // Add base map layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);
    
        // Add geocoder control
        const geocoder = L.Control.geocoder({
            defaultMarkGeocode: false
        })
        .on('markgeocode', function(e) {
            const bbox = e.geocode.bbox;
            const poly = L.polygon([
                bbox.getSouthEast(),
                bbox.getNorthEast(),
                bbox.getNorthWest(),
                bbox.getSouthWest()
            ]).addTo(map);
            map.fitBounds(poly.getBounds());
        })
        .addTo(map);
    
        // Add marker cluster group
        const markers = L.markerClusterGroup();
    
        // Example markers (you can modify this with actual data)
        const exampleMarkers = [
            { lat: 19.432608, lng: -99.133209, charger: 'Level 1', access: 'Public', state: 'CDMX' },
            { lat: 19.432701, lng: -99.134216, charger: 'Level 2', access: 'Private', state: 'CDMX' },
            { lat: 18.918611, lng: -99.234167, charger: 'DC Fast', access: 'Public', state: 'Morelos' }
        ];
    
        exampleMarkers.forEach(markerData => {
            const marker = L.marker([markerData.lat, markerData.lng]);
            marker.bindPopup(`<b>Tipo de Cargador:</b> ${markerData.charger}<br><b>Acceso:</b> ${markerData.access}<br><b>Estado:</b> ${markerData.state}`);
            marker.addTo(markers);
        });
    
        map.addLayer(markers);
    
        // Function to handle search
        document.getElementById('search-button').addEventListener('click', function() {
            const chargerType = document.getElementById('search-charger-filter').value;
            const accessType = document.getElementById('search-power-filter').value;
            const state = document.getElementById('search-state-filter').value;
    
            markers.clearLayers();
    
            exampleMarkers.forEach(markerData => {
                if (
                    (chargerType === 'all' || markerData.charger === chargerType) &&
                    (accessType === 'all' || markerData.access === accessType) &&
                    (state === 'all' || markerData.state === state)
                ) {
                    const marker = L.marker([markerData.lat, markerData.lng]);
                    marker.bindPopup(`<b>Tipo de Cargador:</b> ${markerData.charger}<br><b>Acceso:</b> ${markerData.access}<br><b>Estado:</b> ${markerData.state}`);
                    marker.addTo(markers);
                }
            });
    
            map.addLayer(markers);
        });
    
        // Add routing control
        const routingControl = L.Routing.control({
            waypoints: [],
            routeWhileDragging: true,
            geocoder: L.Control.Geocoder.nominatim()
        }).addTo(map);
    
        document.getElementById('removeStopsButton').addEventListener('click', function() {
            const waypoints = routingControl.getWaypoints();
            routingControl.setWaypoints([waypoints[0], waypoints[waypoints.length - 1]]);
        });
    
        document.getElementById('clearMarkersButton').addEventListener('click', function() {
            routingControl.setWaypoints([]);
            map.eachLayer(function(layer) {
                if (layer instanceof L.Marker && layer.options.icon && layer.options.icon.options.className === 'x-marker') {
                    map.removeLayer(layer);
                }
            });
            map.setView([37.0902, -95.7129], 4);
            
        });
    
        document.getElementById('changeAutonomyButton').addEventListener('click', function() {
            const autonomy = prompt('Ingrese la nueva autonomía en kilómetros:');
            if (autonomy !== null) {
                alert("Has ingresado una autonomía de " + autonomy + " kilómetros.");
                const selectedChargerType = document.getElementById('search-charger-filter').value;
                if (selectedChargerType === 'all') {
                    alert('Seleccione un tipo para obtener una estimación precisa del tiempo de carga.');
                }
            }
        });
    
        // Function to reset filters
        function resetFilters() {
            document.getElementById('search-charger-filter').value = 'all';
            document.getElementById('search-power-filter').value = 'all';
            document.getElementById('search-state-filter').value = 'all';
        }
    
        routingControl.on('routesfound', function(e) {
            let accumulatedTime = 0;
            const autonomyKm = parseFloat(prompt("Ingrese la autonomía en kilómetros:", "100"));
    
            map.eachLayer(function(layer) {
                if (layer instanceof L.Marker && layer.options.icon && layer.options.icon.options.className === 'x-marker') {
                    map.removeLayer(layer);
                }
            });
    
            const route = e.routes[0].coordinates;
            let autonomyLeft = autonomyKm;
            const selectedChargerType = document.getElementById('search-charger-filter').value;
            const filterDefault = selectedChargerType === 'all';

            for (let i = 0; i < route.length - 1; i++) {
                const distance = route[i].distanceTo(route[i + 1]);
                autonomyLeft -= distance / 1000;

                while (autonomyLeft <= 20) {
                    const ratio = (autonomyKm - autonomyLeft) / autonomyKm;
                    const xLat = route[i].lat + ratio * (route[i + 1].lat - route[i].lat);
                    const xLng = route[i].lng + ratio * (route[i + 1].lng - route[i].lng);
                    L.marker([xLat, xLng], { icon: L.divIcon({ className: 'x-marker', html: 'X' }) }).addTo(map);

                    autonomyLeft += autonomyKm; // Incrementar autonomyLeft por autonomyKm
                }
            }

            document.getElementById('timeCounter').innerText = "Tiempo acumulado: " + accumulatedTime + "h";
        });
    </script>    
</body>
</html>
