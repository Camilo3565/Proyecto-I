<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Página definitiva</title>
    <link rel="stylesheet" href="styles2.css">

    <!-- Leaflet CSS y JavaScript -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css"/>
    <script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"></script>
    <!-- Leaflet Routing Machine -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.css"/>
    <script src="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js"></script>
    <!-- Leaflet Control Geocoder -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder@1.13.0/dist/Control.Geocoder.css"/>
    <script src="https://unpkg.com/leaflet-control-geocoder@1.13.0/dist/Control.Geocoder.js"></script>
    <!-- Leaflet Marker Cluster -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css"/>
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css"/>
    <script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>

    <style>
        .x-marker {
            background-color: transparent;
            color: rgb(0, 0, 0);
            font-size: 16px;
            text-align: center;
            width: 10px;
            height: 10px;
            line-height: 20px;
            border-radius: 50%;
            display: inline-block;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="wrapper">
            <div class="card-switch">
                <label class="switch">
                   <input type="checkbox" class="toggle" id="routeToggle" onchange="resetFilters()">
                   <span class="slider"></span>
                   <span class="card-side"></span>
                   <div class="flip-card__inner">
                      <div class="flip-card__front">
                         <div class="title">Búsqueda</div>
                         <form class="flip-card__form" action="">
                            <label for="search-charger-filter">Tipo de Cargador:</label>
                            <select id="search-charger-filter" class="flip-card__input">
                                <option value="all">Todos</option>
                                <option value="Level 1">Tipo 1</option>
                                <option value="Level 2">Tipo 2</option>
                                <option value="DC Fast">Tipo Fast</option>
                            </select>
                            <label for="search-power-filter">Acceso:</label>
                            <select id="search-power-filter" class="flip-card__input">
                              <option value="all">Todos</option>
                              <option value="Public">Público</option>
                              <option value="Private">Privado</option>
                            </select>
                            <label for="search-state-filter">Estado:</label>
                            <select id="search-state-filter" class="flip-card__input">
                              <option value="all">Todos</option>
                              <option value="all">Todos</option>
                              <option value="AL">Alabama</option>
                              <option value="AK">Alaska</option>
                              <option value="AZ">Arizona</option>
                              <option value="AR">Arkansas</option>
                              <option value="CA">California</option>
                              <option value="CO">Colorado</option>
                              <option value="CT">Connecticut</option>
                              <option value="DE">Delaware</option>
                              <option value="FL">Florida</option>
                              <option value="GA">Georgia</option>
                              <option value="HI">Hawái</option>
                              <option value="ID">Idaho</option>
                              <option value="IL">Illinois</option>
                              <option value="IN">Indiana</option>
                              <option value="IA">Iowa</option>
                              <option value="KS">Kansas</option>
                              <option value="KY">Kentucky</option>
                              <option value="LA">Luisiana</option>
                              <option value="ME">Maine</option>
                              <option value="MD">Maryland</option>
                              <option value="MA">Massachusetts</option>
                              <option value="MI">Míchigan</option>
                              <option value="MN">Minnesota</option>
                              <option value="MS">Misisipi</option>
                              <option value="MO">Misuri</option>
                              <option value="MT">Montana</option>
                              <option value="NE">Nebraska</option>
                              <option value="NV">Nevada</option>
                              <option value="NH">Nuevo Hampshire</option>
                              <option value="NJ">Nueva Jersey</option>
                              <option value="NM">Nuevo México</option>
                              <option value="NY">Nueva York</option>
                              <option value="NC">Carolina del Norte</option>
                              <option value="ND">Dakota del Norte</option>
                              <option value="OH">Ohio</option>
                              <option value="OK">Oklahoma</option>
                              <option value="OR">Oregón</option>
                              <option value="PA">Pensilvania</option>
                              <option value="RI">Rhode Island</option>
                              <option value="SC">Carolina del Sur</option>
                              <option value="SD">Dakota del Sur</option>
                              <option value="TN">Tennessee</option>
                              <option value="TX">Texas</option>
                              <option value="UT">Utah</option>
                              <option value="VT">Vermont</option>
                              <option value="VA">Virginia</option>
                              <option value="WA">Washington</option>
                              <option value="WV">Virginia Occidental</option>
                              <option value="WI">Wisconsin</option>
                              <option value="WY">Wyoming</option>
                            </select>
                            <button type="button" class="flip-card__btn" id="search-button">Buscar</button>
                         </form>
                      </div>
                      <div class="flip-card__back">
                         <div class="title">Ruta</div>
                         <form class="flip-card__form" action="">
                            <button type="button" class="flip-card__btn" id="removeStopsButton">Eliminar Paradas</button>
                            <button type="button" class="flip-card__btn" id="clearMarkersButton">Eliminar Ruta</button>
                            <button type="button" class="flip-card__btn" id="changeAutonomyButton">Cambiar autonomía</button>
                            <div id="timeCounter" class="control-button">Tiempo acumulado: 0h</div>
                            <div id="chargingInterval" class="control-button">Intervalo de tiempo de carga</div>
                            <div id="reloadRouteContainer", style="background-color: white;">
                                <button type="button" id="reloadRouteButton">
                                    <img src="image.png" alt="Recargar Ruta">
                                </button>
                            </div>
                            
                         </form>
                      </div>
                   </div>
                </label>
             </div>
        </div>
    </div>
    <div id="map"></div>

    <script>
    
        // Initialize the map
        const map = L.map('map').setView([37.0902, -95.7129], 4);

        // Add base map layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        // Add geocoder control
        const geocoder = L.Control.geocoder({
            defaultMarkGeocode: false
        })
        .on('markgeocode', function(e) {
            const bbox = e.geocode.bbox;
            const poly = L.polygon([
                bbox.getSouthEast(),
                bbox.getNorthEast(),
                bbox.getNorthWest(),
                bbox.getSouthWest()
            ]).addTo(map);
            map.fitBounds(poly.getBounds());
        })
        .addTo(map);

        // Add marker cluster group
        const markers = L.markerClusterGroup();

        // Example markers (you can modify this with actual data)
        const exampleMarkers = [
            
        ];

        exampleMarkers.forEach(markerData => {
            const marker = L.marker([markerData.lat, markerData.lng], {
                icon: L.icon({
                    iconUrl: 'electric-station-fuel-svgrepo-com.svg', 
                    iconSize: [32, 32]
                })
            });
            marker.bindPopup(`<b>Tipo de Cargador:</b> ${markerData.charger}<br><b>Acceso:</b> ${markerData.access}<br><b>Estado:</b> ${markerData.state}`);
            marker.addTo(markers);
        });

        map.addLayer(markers);

        // Function to handle search
        document.getElementById('search-button').addEventListener('click', function() {
            const chargerType = document.getElementById('search-charger-filter').value;
            const accessType = document.getElementById('search-power-filter').value;
            const state = document.getElementById('search-state-filter').value;

            markers.clearLayers();

            exampleMarkers.forEach(markerData => {
                if (
                    (chargerType === 'all' || markerData.charger === chargerType) &&
                    (accessType === 'all' || markerData.access === accessType) &&
                    (state === 'all' || markerData.state === state)
                ) {
                    const marker = L.marker([markerData.lat, markerData.lng]);
                    marker.bindPopup(`<b>Tipo de Cargador:</b> ${markerData.charger}<br><b>Acceso:</b> ${markerData.access}<br><b>Estado:</b> ${markerData.state}`);
                    marker.addTo(markers);
                }
            });

            map.addLayer(markers);
        });
        

// Agregar el control de enrutamiento con la opción showAlternatives habilitada y estilos personalizados
        const routingControl = L.Routing.control({
            waypoints: [],
            routeWhileDragging: true,
            geocoder: L.Control.Geocoder.nominatim(),
            showAlternatives: true,
            altLineOptions: {
                styles: [
                    { color: 'blue', opacity: 0.4, weight: 3, dashArray: '5,10' } // Estilo para las rutas alternativas (línea discontinua azul)
                ]
            },
            lineOptions: {
                styles: [
                    { color: 'red', opacity: 0.6, weight: 3 } // Estilo para la ruta principal (línea continua verde)
                ]
            }
        }).addTo(map);


        document.getElementById('removeStopsButton').addEventListener('click', function() {
            const waypoints = routingControl.getWaypoints();
            routingControl.setWaypoints([waypoints[0], waypoints[waypoints.length - 1]]);
        });

        document.getElementById('clearMarkersButton').addEventListener('click', function() {
            routingControl.setWaypoints([]);
            map.eachLayer(function(layer) {
                if (layer instanceof L.Marker && layer.options.icon && layer.options.icon.options.className === 'x-marker') {
                    map.removeLayer(layer);
                }
            });
            map.setView([37.0902, -95.7129], 4);
        });

        let autonomyValue = null;

        document.getElementById('changeAutonomyButton').addEventListener('click', function() {
            if (autonomyValue !== null) {
                // Si el valor de la autonomía no está definido, solicitar al usuario el nuevo valor
                const autonomy = prompt('Ingrese la nueva autonomía en kilómetros:');
                if (autonomy !== null) {
                    // Convertir el valor de la autonomía a un número
                    const newAutonomy = parseFloat(autonomy);
                    if (!isNaN(newAutonomy) && newAutonomy > 0) {
                        autonomyValue = newAutonomy; // Almacenar el valor de la autonomía
                    } else {
                        alert("Por favor, ingrese un valor válido para la autonomía.");
                        return; // Salir de la función si el valor de la autonomía no es válido
                    }
                } else {
                    return; // Salir de la función si el usuario cancela
                }
            }

            // Recalcular la ruta con el valor almacenado de la autonomía
            const waypoints = routingControl.getWaypoints();
            if (waypoints.length >= 2) {
                const waypointsLatLngs = waypoints.map(waypoint => waypoint.latLng);
                const routingOptions = {
                    waypoints: waypointsLatLngs,
                    routeWhileDragging: true,
                    geocoder: L.Control.Geocoder.nominatim()
                };
                routingControl.setWaypoints([]);
                routingControl.setWaypoints(waypointsLatLngs);

                // Calcular y mostrar las X en la ruta
                calculateAndShowXMarkers(autonomyValue);

                // Actualizar el tiempo acumulado y el intervalo de tiempo de carga
                updateAccumulatedTimeAndChargingInterval(autonomyValue);
            } else {
                alert("Debe haber al menos dos puntos de ruta para calcular la autonomía.");
            }
        });

        
        

        function updateAccumulatedTimeAndChargingInterval(autonomy) {
            // Calcular el tiempo acumulado y el intervalo de tiempo de carga
            const chargeTimes = {
                'Level 1': 8,
                'Level 2': 4,
                'DC Fast': 1
            };

            let accumulatedTime = 0;
            let minTime = 0;
            let maxTime = 0;

            map.eachLayer(function(layer) {
                if (layer instanceof L.Marker && layer.options.icon && layer.options.icon.options.className === 'x-marker') {
                    accumulatedTime += chargeTimes['DC Fast'];
                    minTime += chargeTimes['Level 1'];
                    maxTime += chargeTimes['DC Fast'];
                }
            });

            // Actualizar los elementos HTML con los nuevos valores
            document.getElementById('timeCounter').innerText = "Tiempo acumulado: " + accumulatedTime + "h";
            document.getElementById('chargingInterval').innerText = "Intervalo de tiempo de carga: [" + minTime + "h - " + maxTime + "h]";
        }


        routingControl.on('routesfound', function(e) {
            
            let accumulatedTime = 0;
            let minTime = 0;
            let maxTime = 0;

            const autonomyKm = parseFloat(prompt("Ingrese la autonomía en kilómetros:", "100"));
            const selectedChargerType = document.getElementById('search-charger-filter').value;

            const chargeTimes = {
                'Level 1': 8,
                'Level 2': 4,
                'DC Fast': 1
            };

            const defaultChargeTime = chargeTimes[selectedChargerType] || 0;

            map.eachLayer(function(layer) {
                if (layer instanceof L.Marker && layer.options.icon && layer.options.icon.options.className === 'x-marker') {
                    map.removeLayer(layer);
                }
            });

            const route = e.routes[0].coordinates;
            let autonomyLeft = autonomyKm;

            for (let i = 0; i < route.length - 1; i++) {
                const distance = route[i].distanceTo(route[i + 1]);
                autonomyLeft -= distance / 1000;

                while (autonomyLeft <= 20) {
                    const ratio = (autonomyKm - autonomyLeft) / autonomyKm;
                    const xLat = route[i].lat + ratio * (route[i + 1].lat - route[i].lat);
                    const xLng = route[i].lng + ratio * (route[i + 1].lng - route[i].lng);
                    L.marker([xLat, xLng], { icon: L.divIcon({ className: 'x-marker', html: 'X' }) }).addTo(map);

                    accumulatedTime += defaultChargeTime;
                    minTime += chargeTimes['Level 1'];
                    maxTime += chargeTimes['DC Fast'];

                    autonomyLeft += autonomyKm;
                }
            }

            document.getElementById('timeCounter').innerText = "Tiempo acumulado: " + accumulatedTime + "h";
            document.getElementById('chargingInterval').innerText = "Intervalo de tiempo de carga: [" + maxTime + "h - " + minTime + "h]";
        });
        function reloadRoute() {
    
            const selectedChargerType = document.getElementById('search-charger-filter').value;

            // Calcular el tiempo de carga basado en el tipo de cargador
            const chargeTimes = {
                'Level 1': 8,
                'Level 2': 4,
                'DC Fast': 1
            };
            const defaultChargeTime = chargeTimes[selectedChargerType] || 0;

            // Calcular el tiempo acumulado y el intervalo de tiempo de carga
            let accumulatedTime = 0;
            let minTime = 0;
            let maxTime = 0;

            // Recorrer los marcadores y actualizar el tiempo acumulado
            map.eachLayer(function(layer) {
                if (layer instanceof L.Marker && layer.options.icon && layer.options.icon.options.className === 'x-marker') {
                    accumulatedTime += defaultChargeTime;
                    minTime += chargeTimes['Level 1'];
                    maxTime += chargeTimes['DC Fast'];
                }
            });

            // Actualizar los elementos HTML con los nuevos valores
            document.getElementById('timeCounter').innerText = "Tiempo acumulado: " + accumulatedTime + "h";
            document.getElementById('chargingInterval').innerText = "Intervalo de tiempo de carga: [" + maxTime + "h - " + minTime + "h]";
        }

        document.getElementById('reloadRouteButton').addEventListener('click', reloadRoute);

        

           
    </script>

</body>
</html>
